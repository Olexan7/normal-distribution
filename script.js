// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è MŒæ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π
function confidenceIntervalKnownVariance(data, alpha) {
  const n = data.length;
  const mean = data.reduce((sum, x) => sum + x, 0) / n;
  const squaredDifferences = data.map((x) => Math.pow(x - mean, 2));
  const variance = squaredDifferences.reduce((sum, x) => sum + x, 0) / n;
  const z = jStat.normal.inv(1 - (1 - alpha) / 2, 0, 1); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É jStat –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è z-–∑–Ω–∞—á–µ–Ω–∏—è

  const lowerBound = mean - z * Math.sqrt(variance / n);
  const upperBound = mean + z * Math.sqrt(variance / n);

  return [lowerBound.toFixed(2), upperBound.toFixed(2)];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è MŒæ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π
function confidenceIntervalUnknownVariance(data, alpha) {
  const n = data.length;
  const mean = data.reduce((sum, x) => sum + x, 0) / n;
  const t = jStat.studentt.inv(1 - (1 - alpha) / 2, n - 1); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É jStat –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è t-–∑–Ω–∞—á–µ–Ω–∏—è
  const s = Math.sqrt(
    data.reduce((sum, x) => sum + Math.pow(x - mean, 2), 0) / (n - 1)
  ); // –ù–µ—Å–º–µ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–∏—Å–ø–µ—Ä—Å–∏–∏

  const lowerBound = mean - t * (s / Math.sqrt(n));
  const upperBound = mean + t * (s / Math.sqrt(n));

  return [lowerBound.toFixed(2), upperBound.toFixed(2)];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è DŒæ
function confidenceIntervalVariance(data, alpha) {
  const n = data.length;
  const chi2Lower = jStat.chisquare.inv((1 - alpha) / 2, n - 1); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É jStat –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã chi-–∫–≤–∞–¥—Ä–∞—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  const chi2Upper = jStat.chisquare.inv((1 + alpha) / 2, n - 1); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É jStat –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã chi-–∫–≤–∞–¥—Ä–∞—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  const mean = data.reduce((sum, x) => sum + x, 0) / n;
  const squaredDifferences = data.map((x) => Math.pow(x - mean, 2));
  const variance = squaredDifferences.reduce((sum, x) => sum + x, 0) / n;
  const lowerBound = ((n - 1) * variance) / chi2Upper;
  const upperBound = ((n - 1) * variance) / chi2Lower;

  return [lowerBound.toFixed(2), upperBound.toFixed(2)];
}

function main() {
  document.querySelector(".text-compare").innerHTML = "";
  document.querySelector(".interval-case").innerHTML = "";
  document.querySelector("#value-table").innerHTML = "";
  document.querySelector("#variation-table").innerHTML =
    "<thead><tr><th>–ò–Ω—Ç–µ—Ä–≤–∞–ª</th><th>–ß–∞—Å—Ç–æ—Ç–∞</th></tr></thead><tbody></tbody>";
  Chart.helpers.each(Chart.instances, function (instance) {
    instance.destroy();
  });

  function generateRandomVariable() {
    let x = 0;
    for (let i = 0; i < 12; i++) {
      x += Math.random();
    }
    x -= 6;
    return x;
  }

  function transformToNormalDistribution(x, m, sigma) {
    return sigma * x + m;
  }

  function calculateIntervalBounds(data, numIntervals) {
    let minValue = Math.min.apply(null, data);
    let maxValue = Math.max.apply(null, data);
    let intervalSize = (maxValue - minValue) / numIntervals;
    let bounds = [];
    let currentBound = minValue;
    for (let i = 0; i < numIntervals; i++) {
      bounds.push(currentBound);
      currentBound += intervalSize;
    }
    bounds.push(maxValue + 1); // Add one to include the upper bound
    return bounds;
  }

  function createVariationSeries(data, bounds) {
    let variationSeries = new Array(bounds.length).fill(0);
    for (let i = 0; i < data.length; i++) {
      let value = data[i];
      for (let j = 0; j < bounds.length - 1; j++) {
        if (value >= bounds[j] && value < bounds[j + 1]) {
          variationSeries[j]++;
          break;
        }
      }
    }
    return variationSeries;
  }

  function calculateGaussianDensity(x, m, sigma) {
    let exponent = -Math.pow(x - m, 2) / (2 * Math.pow(sigma, 2));
    let coefficient = 1 / (sigma * Math.sqrt(2 * Math.PI));
    return coefficient * Math.exp(exponent);
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  let numValues = parseInt(document.querySelector(".count-input").value);
  let generatedData = [];
  let randomArray = [];
  for (let i = 0; i < numValues; i++) {
    let randomVariable = generateRandomVariable();
    randomArray.push(randomVariable);
    let normalVariable = transformToNormalDistribution(randomVariable, 4, 1);
    generatedData.push(normalVariable);
  }

  const row1 = document.createElement("tr");
  const row2 = document.createElement("tr");
  const row3 = document.createElement("tr");

  t1 = document.createElement("td");
  t2 = document.createElement("td");
  t3 = document.createElement("td");
  t1.textContent = "‚Ññ –∏—Å–ø—ã—Ç–∞–Ω–∏—è";
  t2.textContent = "N(0, 1)";
  t3.textContent = "N(ùúá, œÉ)";
  row1.appendChild(t1);
  row2.appendChild(t2);
  row3.appendChild(t3);

  for (let i = 0; i < generatedData.length; i++) {
    const cell1 = document.createElement("td");
    const cell2 = document.createElement("td");
    const cell3 = document.createElement("td");
    cell1.textContent = i; // –ù–æ–º–µ—Ä –∏—Å–ø—ã—Ç–∞–Ω–∏—è
    cell2.textContent = randomArray[i].toFixed(2); // –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    cell3.textContent = generatedData[i].toFixed(2);

    row1.appendChild(cell1);
    row2.appendChild(cell2);
    row3.appendChild(cell3);
  }
  document.getElementById("value-table").appendChild(row1);
  document.getElementById("value-table").appendChild(row2);
  document.getElementById("value-table").appendChild(row3);

  // –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
  let numIntervals = Math.floor(Math.log(numValues));
  let bounds = calculateIntervalBounds(generatedData, numIntervals);
  let variationSeries = createVariationSeries(generatedData, bounds);

  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
  let tableBody = document
    .getElementById("variation-table")
    .getElementsByTagName("tbody")[0];
  for (let i = 0; i < numIntervals; i++) {
    let newRow = document.createElement("tr");
    let intervalCell = document.createElement("td");
    intervalCell.textContent =
      "[" + bounds[i].toFixed(2) + ", " + bounds[i + 1].toFixed(2) + ")";
    let frequencyCell = document.createElement("td");
    frequencyCell.textContent = variationSeries[i];
    newRow.appendChild(intervalCell);
    newRow.appendChild(frequencyCell);
    tableBody.appendChild(newRow);
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
  let histogramCtx = document.getElementById("histogram").getContext("2d");
  let labels = bounds.slice(0, bounds.length - 1).map(function (value, index) {
    return "[" + value.toFixed(2) + ", " + bounds[index + 1].toFixed(2) + ")";
  });
  let histogramData = {
    labels: labels,
    datasets: [
      {
        label: "–ß–∞—Å—Ç–æ—Ç–∞",
        data: variationSeries,
        backgroundColor: "rgba(0, 123, 255, 0.5)",
        borderColor: "rgba(0, 123, 255, 1)",
        borderWidth: 1,
      },
    ],
  };
  let histogramOptions = {
    scales: {
      y: {
        beginAtZero: true,
        stepSize: 1,
      },
    },
  };
  let histogramChart = new Chart(histogramCtx, {
    type: "bar",
    data: histogramData,
    options: histogramOptions,
  });

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
  let densityPlotCtx = document.getElementById("density-plot").getContext("2d");
  let densityPlotLabels = [];
  let densityPlotData = [];
  let step = (bounds[bounds.length - 1] - bounds[0]) / 100;
  for (let i = bounds[0]; i < bounds[bounds.length - 1]; i += step) {
    densityPlotLabels.push(i.toFixed(2));
    let density = calculateGaussianDensity(i, 4, 1);
    densityPlotData.push(density.toFixed(4));
  }
  let densityPlotConfig = {
    type: "line",
    data: {
      labels: densityPlotLabels,
      datasets: [
        {
          label: "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏",
          data: densityPlotData,
          backgroundColor: "rgba(0, 123, 255, 0.5)",
          borderColor: "rgba(0, 123, 255, 1)",
        },
      ],
    },
    options: {},
  };
  let densityPlotChart = new Chart(densityPlotCtx, densityPlotConfig);

  let compareArray = [];
  compareArray = generatedData.slice(0, parseInt(generatedData.length * 0.1));
  const n = compareArray.length;
  let temp = `<p>–í—ã–±–æ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ${n} –ø–µ—Ä–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</p>`;

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
  const xBar = compareArray.reduce((sum, value) => sum + value, 0) / n;
  temp += `<p>–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ x&#x0304: ${xBar.toFixed(2)}</p>`;

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏
  const sampleVariance =
    compareArray.reduce((sum, value) => sum + Math.pow(value - xBar, 2), 0) / n;
  temp += `<p>–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏ D<sub>–≤</sub>: ${sampleVariance.toFixed(
    2
  )}</p>`;

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–æ—á–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏
  const correctedSampleVariance =
    compareArray.reduce((sum, value) => sum + Math.pow(value - xBar, 2), 0) /
    (n - 1);
  temp += `<p>–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–æ—á–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏ S<sup>2</sup>: ${correctedSampleVariance.toFixed(
    2
  )}</p>`;

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
  const sampleStandardDeviation = Math.sqrt(sampleVariance);
  temp += `<p>–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è œÉ<sub>–≤</sub>: ${sampleStandardDeviation.toFixed(
    2
  )}</p>`;

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
  const correctedSampleStandardDeviation = Math.sqrt(correctedSampleVariance);
  temp += `<p>–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è S: ${correctedSampleStandardDeviation.toFixed(
    2
  )}</p>`;
  document.querySelector(".text-compare").innerHTML = temp;

  /////////////
  let templation = "";
  // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  const data = generatedData; // –ó–∞–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –≤–∞—à–µ–π –≤—ã–±–æ—Ä–∫–∏
  const alpha = 0.95;

  const intervalKnownVariance = confidenceIntervalKnownVariance(data, alpha);
  templation += `<p>–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è MŒæ - Œº —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: [${intervalKnownVariance}]</p>`;
  const intervalUnknownVariance = confidenceIntervalUnknownVariance(
    data,
    alpha
  );
  templation += `<p>–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è MŒæ - Œº —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π: [${intervalUnknownVariance}]</p>`;
  const intervalVariance = confidenceIntervalVariance(data, alpha);
  templation += `<p>–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è DŒæ - œÉ: [${intervalVariance}]</p>`;
  document.querySelector(".interval-case").innerHTML = templation;
}

main();

document.querySelector(".count-button").addEventListener("click", () => {
  main();
});
